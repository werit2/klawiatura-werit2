
klawiatura.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000276  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000222  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000276  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001104  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000754  00000000  00000000  00001434  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006f7  00000000  00000000  00001b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00002280  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000540  00000000  00000000  000022f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005a9  00000000  00000000  00002834  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00002ddd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	41 c0       	rjmp	.+130    	; 0x88 <__bad_interrupt>
   6:	00 00       	nop
   8:	3f c0       	rjmp	.+126    	; 0x88 <__bad_interrupt>
   a:	00 00       	nop
   c:	3d c0       	rjmp	.+122    	; 0x88 <__bad_interrupt>
   e:	00 00       	nop
  10:	3b c0       	rjmp	.+118    	; 0x88 <__bad_interrupt>
  12:	00 00       	nop
  14:	39 c0       	rjmp	.+114    	; 0x88 <__bad_interrupt>
  16:	00 00       	nop
  18:	37 c0       	rjmp	.+110    	; 0x88 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	35 c0       	rjmp	.+106    	; 0x88 <__bad_interrupt>
  1e:	00 00       	nop
  20:	33 c0       	rjmp	.+102    	; 0x88 <__bad_interrupt>
  22:	00 00       	nop
  24:	31 c0       	rjmp	.+98     	; 0x88 <__bad_interrupt>
  26:	00 00       	nop
  28:	2f c0       	rjmp	.+94     	; 0x88 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2d c0       	rjmp	.+90     	; 0x88 <__bad_interrupt>
  2e:	00 00       	nop
  30:	2b c0       	rjmp	.+86     	; 0x88 <__bad_interrupt>
  32:	00 00       	nop
  34:	29 c0       	rjmp	.+82     	; 0x88 <__bad_interrupt>
  36:	00 00       	nop
  38:	27 c0       	rjmp	.+78     	; 0x88 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	25 c0       	rjmp	.+74     	; 0x88 <__bad_interrupt>
  3e:	00 00       	nop
  40:	23 c0       	rjmp	.+70     	; 0x88 <__bad_interrupt>
  42:	00 00       	nop
  44:	21 c0       	rjmp	.+66     	; 0x88 <__bad_interrupt>
  46:	00 00       	nop
  48:	1f c0       	rjmp	.+62     	; 0x88 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1d c0       	rjmp	.+58     	; 0x88 <__bad_interrupt>
  4e:	00 00       	nop
  50:	1b c0       	rjmp	.+54     	; 0x88 <__bad_interrupt>
  52:	00 00       	nop
  54:	19 c0       	rjmp	.+50     	; 0x88 <__bad_interrupt>
  56:	00 00       	nop
  58:	17 c0       	rjmp	.+46     	; 0x88 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	15 c0       	rjmp	.+42     	; 0x88 <__bad_interrupt>
  5e:	00 00       	nop
  60:	13 c0       	rjmp	.+38     	; 0x88 <__bad_interrupt>
  62:	00 00       	nop
  64:	11 c0       	rjmp	.+34     	; 0x88 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	02 d0       	rcall	.+4      	; 0x8a <main>
  86:	cb c0       	rjmp	.+406    	; 0x21e <_exit>

00000088 <__bad_interrupt>:
  88:	bb cf       	rjmp	.-138    	; 0x0 <__vectors>

0000008a <main>:
{
	
	
	/* Initializes MCU, drivers and middleware */
	//atmel_start_init();
	DDRB |= 0b00111100; //(1 << PORTB5);
  8a:	84 b1       	in	r24, 0x04	; 4
  8c:	8c 63       	ori	r24, 0x3C	; 60
  8e:	84 b9       	out	0x04, r24	; 4
 */
static inline void ROW0_set_dir(const enum port_dir dir)
{
	//PORTC_set_pin_dir(1, dir);
	if (dir == PORT_DIR_OUT) {
		DDRC |= (1 << PORTC1);
  90:	87 b1       	in	r24, 0x07	; 7
  92:	82 60       	ori	r24, 0x02	; 2
  94:	87 b9       	out	0x07, r24	; 7
{
	//PORTC_set_pin_level(1, level);
	if (level) {
		PORTC |= (1 << PORTC1);
	} else {
		PORTC &= ~(1 << PORTC1);
  96:	88 b1       	in	r24, 0x08	; 8
  98:	8d 7f       	andi	r24, 0xFD	; 253
  9a:	88 b9       	out	0x08, r24	; 8
 */
static inline void ROW1_set_dir(const enum port_dir dir)
{
	//PORTC_set_pin_dir(5, dir);
	if (dir == PORT_DIR_OUT) {
		DDRC |= (1 << PORTC5);
  9c:	87 b1       	in	r24, 0x07	; 7
  9e:	80 62       	ori	r24, 0x20	; 32
  a0:	87 b9       	out	0x07, r24	; 7
{
	//PORTC_set_pin_level(5, level);
	if (level) {
		PORTC |= (1 << PORTC5);
	} else {
		PORTC &= ~(1 << PORTC5);
  a2:	88 b1       	in	r24, 0x08	; 8
  a4:	8f 7d       	andi	r24, 0xDF	; 223
  a6:	88 b9       	out	0x08, r24	; 8
 */
static inline void ROW2_set_dir(const enum port_dir dir)
{
	//PORTC_set_pin_dir(4, dir);
	if (dir == PORT_DIR_OUT) {
		DDRC |= (1 << PORTC4);
  a8:	87 b1       	in	r24, 0x07	; 7
  aa:	80 61       	ori	r24, 0x10	; 16
  ac:	87 b9       	out	0x07, r24	; 7
{
	//PORTC_set_pin_level(4, level);
	if (level) {
		PORTC |= (1 << PORTC4);
	} else {
		PORTC &= ~(1 << PORTC4);
  ae:	88 b1       	in	r24, 0x08	; 8
  b0:	8f 7e       	andi	r24, 0xEF	; 239
  b2:	88 b9       	out	0x08, r24	; 8
{
	//PORTC_set_pin_dir(0, dir);
	if (dir == PORT_DIR_OUT) {
		DDRC |= (1 << PORTC0);
	} else if (dir == PORT_DIR_IN) {
		DDRC &= ~(1 << PORTC0);
  b4:	87 b1       	in	r24, 0x07	; 7
  b6:	8e 7f       	andi	r24, 0xFE	; 254
  b8:	87 b9       	out	0x07, r24	; 7
 */
static inline void COLUMN1_set_level(const uint8_t level)
{
	//PORTC_set_pin_level(0, level);
	if (level) {
		PORTC |= (1 << PORTC0);
  ba:	88 b1       	in	r24, 0x08	; 8
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	88 b9       	out	0x08, r24	; 8
{
	//PORTC_set_pin_dir(2, dir);
	if (dir == PORT_DIR_OUT) {
		DDRC |= (1 << PORTC2);
	} else if (dir == PORT_DIR_IN) {
		DDRC &= ~(1 << PORTC2);
  c0:	87 b1       	in	r24, 0x07	; 7
  c2:	8b 7f       	andi	r24, 0xFB	; 251
  c4:	87 b9       	out	0x07, r24	; 7
 */
static inline void COLUMN0_set_level(const uint8_t level)
{
	//PORTC_set_pin_level(2, level);
	if (level) {
		PORTC |= (1 << PORTC2);
  c6:	88 b1       	in	r24, 0x08	; 8
  c8:	84 60       	ori	r24, 0x04	; 4
  ca:	88 b9       	out	0x08, r24	; 8
{
	//PORTC_set_pin_dir(3, dir);
	if (dir == PORT_DIR_OUT) {
		DDRC |= (1 << PORTC3);
	} else if (dir == PORT_DIR_IN) {
		DDRC &= ~(1 << PORTC3);
  cc:	87 b1       	in	r24, 0x07	; 7
  ce:	87 7f       	andi	r24, 0xF7	; 247
  d0:	87 b9       	out	0x07, r24	; 7
 */
static inline void COLUMN2_set_level(const uint8_t level)
{
	//PORTC_set_pin_level(3, level);
	if (level) {
		PORTC |= (1 << PORTC3);
  d2:	88 b1       	in	r24, 0x08	; 8
  d4:	88 60       	ori	r24, 0x08	; 8
  d6:	88 b9       	out	0x08, r24	; 8
{
	//PORTC_set_pin_level(1, level);
	if (level) {
		PORTC |= (1 << PORTC1);
	} else {
		PORTC &= ~(1 << PORTC1);
  d8:	88 b1       	in	r24, 0x08	; 8
  da:	8d 7f       	andi	r24, 0xFD	; 253
  dc:	88 b9       	out	0x08, r24	; 8
 */
static inline void ROW1_set_level(const uint8_t level)
{
	//PORTC_set_pin_level(5, level);
	if (level) {
		PORTC |= (1 << PORTC5);
  de:	88 b1       	in	r24, 0x08	; 8
  e0:	80 62       	ori	r24, 0x20	; 32
  e2:	88 b9       	out	0x08, r24	; 8
 */
static inline void ROW2_set_level(const uint8_t level)
{
	//PORTC_set_pin_level(4, level);
	if (level) {
		PORTC |= (1 << PORTC4);
  e4:	88 b1       	in	r24, 0x08	; 8
  e6:	80 61       	ori	r24, 0x10	; 16
  e8:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	8f e9       	ldi	r24, 0x9F	; 159
  ec:	9f e0       	ldi	r25, 0x0F	; 15
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <main+0x64>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x6a>
  f4:	00 00       	nop
 * Reads the level on a pin
 */
static inline uint8_t COLUMN0_get_level()
{
	//return PORTC_get_pin_level(2);
	if (PINC & (1 << PINC2)) {
  f6:	86 b1       	in	r24, 0x06	; 6
  f8:	98 2f       	mov	r25, r24
  fa:	94 70       	andi	r25, 0x04	; 4
  fc:	82 fd       	sbrc	r24, 2
		return 1;
  fe:	91 e0       	ldi	r25, 0x01	; 1
	while (1) {
		ROW0_set_level(0);
		ROW1_set_level(1);
		ROW2_set_level(1);
		_delay_ms(1);
		if(COLUMN0_get_level() == 0 )  PORTB |= 0b00010000; //on //port 12
 100:	91 11       	cpse	r25, r1
 102:	04 c0       	rjmp	.+8      	; 0x10c <main+0x82>
 104:	85 b1       	in	r24, 0x05	; 5
 106:	80 61       	ori	r24, 0x10	; 16
 108:	85 b9       	out	0x05, r24	; 5
 10a:	19 c0       	rjmp	.+50     	; 0x13e <main+0xb4>
 * Reads the level on a pin
 */
static inline uint8_t COLUMN1_get_level()
{
	//return PORTC_get_pin_level(0);
	if (PINC & (1 << PINC0)) {
 10c:	86 b1       	in	r24, 0x06	; 6
 10e:	98 2f       	mov	r25, r24
 110:	91 70       	andi	r25, 0x01	; 1
 112:	80 fd       	sbrc	r24, 0
		return 1;
 114:	91 e0       	ldi	r25, 0x01	; 1
		else if(COLUMN1_get_level() == 0) PORTB &= 0b11101111; //off
 116:	91 11       	cpse	r25, r1
 118:	04 c0       	rjmp	.+8      	; 0x122 <main+0x98>
 11a:	85 b1       	in	r24, 0x05	; 5
 11c:	8f 7e       	andi	r24, 0xEF	; 239
 11e:	85 b9       	out	0x05, r24	; 5
 120:	0e c0       	rjmp	.+28     	; 0x13e <main+0xb4>
 * Reads the level on a pin
 */
static inline uint8_t COLUMN2_get_level()
{
	//return PORTC_get_pin_level(3);
	if (PINC & (1 << PINC3)) {
 122:	86 b1       	in	r24, 0x06	; 6
 124:	98 2f       	mov	r25, r24
 126:	98 70       	andi	r25, 0x08	; 8
 128:	83 fd       	sbrc	r24, 3
		return 1;
 12a:	91 e0       	ldi	r25, 0x01	; 1
		else if(COLUMN2_get_level() == 0)  PORTB |= 0b00010000; //on
 12c:	91 11       	cpse	r25, r1
 12e:	04 c0       	rjmp	.+8      	; 0x138 <main+0xae>
 130:	85 b1       	in	r24, 0x05	; 5
 132:	80 61       	ori	r24, 0x10	; 16
 134:	85 b9       	out	0x05, r24	; 5
 136:	03 c0       	rjmp	.+6      	; 0x13e <main+0xb4>
		else PORTB &= 0b11101111; //off
 138:	85 b1       	in	r24, 0x05	; 5
 13a:	8f 7e       	andi	r24, 0xEF	; 239
 13c:	85 b9       	out	0x05, r24	; 5
 */
static inline void ROW0_set_level(const uint8_t level)
{
	//PORTC_set_pin_level(1, level);
	if (level) {
		PORTC |= (1 << PORTC1);
 13e:	88 b1       	in	r24, 0x08	; 8
 140:	82 60       	ori	r24, 0x02	; 2
 142:	88 b9       	out	0x08, r24	; 8
{
	//PORTC_set_pin_level(5, level);
	if (level) {
		PORTC |= (1 << PORTC5);
	} else {
		PORTC &= ~(1 << PORTC5);
 144:	88 b1       	in	r24, 0x08	; 8
 146:	8f 7d       	andi	r24, 0xDF	; 223
 148:	88 b9       	out	0x08, r24	; 8
 */
static inline void ROW2_set_level(const uint8_t level)
{
	//PORTC_set_pin_level(4, level);
	if (level) {
		PORTC |= (1 << PORTC4);
 14a:	88 b1       	in	r24, 0x08	; 8
 14c:	80 61       	ori	r24, 0x10	; 16
 14e:	88 b9       	out	0x08, r24	; 8
 150:	8f e9       	ldi	r24, 0x9F	; 159
 152:	9f e0       	ldi	r25, 0x0F	; 15
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <main+0xca>
 158:	00 c0       	rjmp	.+0      	; 0x15a <main+0xd0>
 15a:	00 00       	nop
 * Reads the level on a pin
 */
static inline uint8_t COLUMN0_get_level()
{
	//return PORTC_get_pin_level(2);
	if (PINC & (1 << PINC2)) {
 15c:	86 b1       	in	r24, 0x06	; 6
 15e:	98 2f       	mov	r25, r24
 160:	94 70       	andi	r25, 0x04	; 4
 162:	82 fd       	sbrc	r24, 2
		return 1;
 164:	91 e0       	ldi	r25, 0x01	; 1
		//_delay_ms(200);
		ROW0_set_level(1);
		ROW1_set_level(0);
		ROW2_set_level(1);
		_delay_ms(1);
		if(COLUMN0_get_level() == 0 )  PORTB |= 0b00100000; //on //port 13
 166:	91 11       	cpse	r25, r1
 168:	04 c0       	rjmp	.+8      	; 0x172 <main+0xe8>
 16a:	85 b1       	in	r24, 0x05	; 5
 16c:	80 62       	ori	r24, 0x20	; 32
 16e:	85 b9       	out	0x05, r24	; 5
 170:	19 c0       	rjmp	.+50     	; 0x1a4 <main+0x11a>
 * Reads the level on a pin
 */
static inline uint8_t COLUMN1_get_level()
{
	//return PORTC_get_pin_level(0);
	if (PINC & (1 << PINC0)) {
 172:	86 b1       	in	r24, 0x06	; 6
 174:	98 2f       	mov	r25, r24
 176:	91 70       	andi	r25, 0x01	; 1
 178:	80 fd       	sbrc	r24, 0
		return 1;
 17a:	91 e0       	ldi	r25, 0x01	; 1
		else if(COLUMN1_get_level() == 0) PORTB &= 0b11011111; //off
 17c:	91 11       	cpse	r25, r1
 17e:	04 c0       	rjmp	.+8      	; 0x188 <main+0xfe>
 180:	85 b1       	in	r24, 0x05	; 5
 182:	8f 7d       	andi	r24, 0xDF	; 223
 184:	85 b9       	out	0x05, r24	; 5
 186:	0e c0       	rjmp	.+28     	; 0x1a4 <main+0x11a>
 * Reads the level on a pin
 */
static inline uint8_t COLUMN2_get_level()
{
	//return PORTC_get_pin_level(3);
	if (PINC & (1 << PINC3)) {
 188:	86 b1       	in	r24, 0x06	; 6
 18a:	98 2f       	mov	r25, r24
 18c:	98 70       	andi	r25, 0x08	; 8
 18e:	83 fd       	sbrc	r24, 3
		return 1;
 190:	91 e0       	ldi	r25, 0x01	; 1
		else if(COLUMN2_get_level() == 0)  PORTB |= 0b00100000; //on
 192:	91 11       	cpse	r25, r1
 194:	04 c0       	rjmp	.+8      	; 0x19e <main+0x114>
 196:	85 b1       	in	r24, 0x05	; 5
 198:	80 62       	ori	r24, 0x20	; 32
 19a:	85 b9       	out	0x05, r24	; 5
 19c:	03 c0       	rjmp	.+6      	; 0x1a4 <main+0x11a>
		else PORTB &= 0b11011111; //off
 19e:	85 b1       	in	r24, 0x05	; 5
 1a0:	8f 7d       	andi	r24, 0xDF	; 223
 1a2:	85 b9       	out	0x05, r24	; 5
 1a4:	9f ef       	ldi	r25, 0xFF	; 255
 1a6:	23 ec       	ldi	r18, 0xC3	; 195
 1a8:	89 e0       	ldi	r24, 0x09	; 9
 1aa:	91 50       	subi	r25, 0x01	; 1
 1ac:	20 40       	sbci	r18, 0x00	; 0
 1ae:	80 40       	sbci	r24, 0x00	; 0
 1b0:	e1 f7       	brne	.-8      	; 0x1aa <main+0x120>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <main+0x12a>
 1b4:	00 00       	nop
 */
static inline void ROW0_set_level(const uint8_t level)
{
	//PORTC_set_pin_level(1, level);
	if (level) {
		PORTC |= (1 << PORTC1);
 1b6:	88 b1       	in	r24, 0x08	; 8
 1b8:	82 60       	ori	r24, 0x02	; 2
 1ba:	88 b9       	out	0x08, r24	; 8
 */
static inline void ROW1_set_level(const uint8_t level)
{
	//PORTC_set_pin_level(5, level);
	if (level) {
		PORTC |= (1 << PORTC5);
 1bc:	88 b1       	in	r24, 0x08	; 8
 1be:	80 62       	ori	r24, 0x20	; 32
 1c0:	88 b9       	out	0x08, r24	; 8
{
	//PORTC_set_pin_level(4, level);
	if (level) {
		PORTC |= (1 << PORTC4);
	} else {
		PORTC &= ~(1 << PORTC4);
 1c2:	88 b1       	in	r24, 0x08	; 8
 1c4:	8f 7e       	andi	r24, 0xEF	; 239
 1c6:	88 b9       	out	0x08, r24	; 8
 1c8:	8f e9       	ldi	r24, 0x9F	; 159
 1ca:	9f e0       	ldi	r25, 0x0F	; 15
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <main+0x142>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <main+0x148>
 1d2:	00 00       	nop
 * Reads the level on a pin
 */
static inline uint8_t COLUMN0_get_level()
{
	//return PORTC_get_pin_level(2);
	if (PINC & (1 << PINC2)) {
 1d4:	86 b1       	in	r24, 0x06	; 6
 1d6:	98 2f       	mov	r25, r24
 1d8:	94 70       	andi	r25, 0x04	; 4
 1da:	82 fd       	sbrc	r24, 2
		return 1;
 1dc:	91 e0       	ldi	r25, 0x01	; 1
		_delay_ms(200);
		ROW0_set_level(1);
		ROW1_set_level(1);
		ROW2_set_level(0);
		_delay_ms(1);
		if(COLUMN0_get_level() == 0 )  PORTB |= 0b00001000; //on //port 11
 1de:	91 11       	cpse	r25, r1
 1e0:	04 c0       	rjmp	.+8      	; 0x1ea <main+0x160>
 1e2:	85 b1       	in	r24, 0x05	; 5
 1e4:	88 60       	ori	r24, 0x08	; 8
 1e6:	85 b9       	out	0x05, r24	; 5
 1e8:	77 cf       	rjmp	.-274    	; 0xd8 <main+0x4e>
 * Reads the level on a pin
 */
static inline uint8_t COLUMN1_get_level()
{
	//return PORTC_get_pin_level(0);
	if (PINC & (1 << PINC0)) {
 1ea:	86 b1       	in	r24, 0x06	; 6
 1ec:	98 2f       	mov	r25, r24
 1ee:	91 70       	andi	r25, 0x01	; 1
 1f0:	80 fd       	sbrc	r24, 0
		return 1;
 1f2:	91 e0       	ldi	r25, 0x01	; 1
		else if(COLUMN1_get_level() == 0) PORTB &= 0b11110111; //off
 1f4:	91 11       	cpse	r25, r1
 1f6:	04 c0       	rjmp	.+8      	; 0x200 <main+0x176>
 1f8:	85 b1       	in	r24, 0x05	; 5
 1fa:	87 7f       	andi	r24, 0xF7	; 247
 1fc:	85 b9       	out	0x05, r24	; 5
 1fe:	6c cf       	rjmp	.-296    	; 0xd8 <main+0x4e>
 * Reads the level on a pin
 */
static inline uint8_t COLUMN2_get_level()
{
	//return PORTC_get_pin_level(3);
	if (PINC & (1 << PINC3)) {
 200:	86 b1       	in	r24, 0x06	; 6
 202:	98 2f       	mov	r25, r24
 204:	98 70       	andi	r25, 0x08	; 8
 206:	83 fd       	sbrc	r24, 3
		return 1;
 208:	91 e0       	ldi	r25, 0x01	; 1
		else if(COLUMN2_get_level() == 0)  PORTB |= 0b00001000; //on
 20a:	91 11       	cpse	r25, r1
 20c:	04 c0       	rjmp	.+8      	; 0x216 <main+0x18c>
 20e:	85 b1       	in	r24, 0x05	; 5
 210:	88 60       	ori	r24, 0x08	; 8
 212:	85 b9       	out	0x05, r24	; 5
 214:	61 cf       	rjmp	.-318    	; 0xd8 <main+0x4e>
		else PORTB &= 0b11110111; //off
 216:	85 b1       	in	r24, 0x05	; 5
 218:	87 7f       	andi	r24, 0xF7	; 247
 21a:	85 b9       	out	0x05, r24	; 5
 21c:	5d cf       	rjmp	.-326    	; 0xd8 <main+0x4e>

0000021e <_exit>:
 21e:	f8 94       	cli

00000220 <__stop_program>:
 220:	ff cf       	rjmp	.-2      	; 0x220 <__stop_program>
