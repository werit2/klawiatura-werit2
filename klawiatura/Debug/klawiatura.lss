
klawiatura.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000109d  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000754  00000000  00000000  00001365  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000065a  00000000  00000000  00001ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00002114  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000540  00000000  00000000  00002188  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000581  00000000  00000000  000026c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00002c49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	41 c0       	rjmp	.+130    	; 0x88 <__bad_interrupt>
   6:	00 00       	nop
   8:	3f c0       	rjmp	.+126    	; 0x88 <__bad_interrupt>
   a:	00 00       	nop
   c:	3d c0       	rjmp	.+122    	; 0x88 <__bad_interrupt>
   e:	00 00       	nop
  10:	3b c0       	rjmp	.+118    	; 0x88 <__bad_interrupt>
  12:	00 00       	nop
  14:	39 c0       	rjmp	.+114    	; 0x88 <__bad_interrupt>
  16:	00 00       	nop
  18:	37 c0       	rjmp	.+110    	; 0x88 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	35 c0       	rjmp	.+106    	; 0x88 <__bad_interrupt>
  1e:	00 00       	nop
  20:	33 c0       	rjmp	.+102    	; 0x88 <__bad_interrupt>
  22:	00 00       	nop
  24:	31 c0       	rjmp	.+98     	; 0x88 <__bad_interrupt>
  26:	00 00       	nop
  28:	2f c0       	rjmp	.+94     	; 0x88 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2d c0       	rjmp	.+90     	; 0x88 <__bad_interrupt>
  2e:	00 00       	nop
  30:	2b c0       	rjmp	.+86     	; 0x88 <__bad_interrupt>
  32:	00 00       	nop
  34:	29 c0       	rjmp	.+82     	; 0x88 <__bad_interrupt>
  36:	00 00       	nop
  38:	27 c0       	rjmp	.+78     	; 0x88 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	25 c0       	rjmp	.+74     	; 0x88 <__bad_interrupt>
  3e:	00 00       	nop
  40:	23 c0       	rjmp	.+70     	; 0x88 <__bad_interrupt>
  42:	00 00       	nop
  44:	21 c0       	rjmp	.+66     	; 0x88 <__bad_interrupt>
  46:	00 00       	nop
  48:	1f c0       	rjmp	.+62     	; 0x88 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1d c0       	rjmp	.+58     	; 0x88 <__bad_interrupt>
  4e:	00 00       	nop
  50:	1b c0       	rjmp	.+54     	; 0x88 <__bad_interrupt>
  52:	00 00       	nop
  54:	19 c0       	rjmp	.+50     	; 0x88 <__bad_interrupt>
  56:	00 00       	nop
  58:	17 c0       	rjmp	.+46     	; 0x88 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	15 c0       	rjmp	.+42     	; 0x88 <__bad_interrupt>
  5e:	00 00       	nop
  60:	13 c0       	rjmp	.+38     	; 0x88 <__bad_interrupt>
  62:	00 00       	nop
  64:	11 c0       	rjmp	.+34     	; 0x88 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	02 d0       	rcall	.+4      	; 0x8a <main>
  86:	98 c0       	rjmp	.+304    	; 0x1b8 <_exit>

00000088 <__bad_interrupt>:
  88:	bb cf       	rjmp	.-138    	; 0x0 <__vectors>

0000008a <main>:
{
	
	
	/* Initializes MCU, drivers and middleware */
	//atmel_start_init();
	DDRB |= 0b00111100; //(1 << PORTB5);
  8a:	84 b1       	in	r24, 0x04	; 4
  8c:	8c 63       	ori	r24, 0x3C	; 60
  8e:	84 b9       	out	0x04, r24	; 4
 */
static inline void ROW0_set_dir(const enum port_dir dir)
{
	//PORTC_set_pin_dir(1, dir);
	if (dir == PORT_DIR_OUT) {
		DDRC |= (1 << PORTC1);
  90:	87 b1       	in	r24, 0x07	; 7
  92:	82 60       	ori	r24, 0x02	; 2
  94:	87 b9       	out	0x07, r24	; 7
{
	//PORTC_set_pin_level(1, level);
	if (level) {
		PORTC |= (1 << PORTC1);
	} else {
		PORTC &= ~(1 << PORTC1);
  96:	88 b1       	in	r24, 0x08	; 8
  98:	8d 7f       	andi	r24, 0xFD	; 253
  9a:	88 b9       	out	0x08, r24	; 8
 */
static inline void ROW1_set_dir(const enum port_dir dir)
{
	//PORTC_set_pin_dir(5, dir);
	if (dir == PORT_DIR_OUT) {
		DDRC |= (1 << PORTC5);
  9c:	87 b1       	in	r24, 0x07	; 7
  9e:	80 62       	ori	r24, 0x20	; 32
  a0:	87 b9       	out	0x07, r24	; 7
{
	//PORTC_set_pin_level(5, level);
	if (level) {
		PORTC |= (1 << PORTC5);
	} else {
		PORTC &= ~(1 << PORTC5);
  a2:	88 b1       	in	r24, 0x08	; 8
  a4:	8f 7d       	andi	r24, 0xDF	; 223
  a6:	88 b9       	out	0x08, r24	; 8
 */
static inline void ROW2_set_dir(const enum port_dir dir)
{
	//PORTC_set_pin_dir(4, dir);
	if (dir == PORT_DIR_OUT) {
		DDRC |= (1 << PORTC4);
  a8:	87 b1       	in	r24, 0x07	; 7
  aa:	80 61       	ori	r24, 0x10	; 16
  ac:	87 b9       	out	0x07, r24	; 7
{
	//PORTC_set_pin_level(4, level);
	if (level) {
		PORTC |= (1 << PORTC4);
	} else {
		PORTC &= ~(1 << PORTC4);
  ae:	88 b1       	in	r24, 0x08	; 8
  b0:	8f 7e       	andi	r24, 0xEF	; 239
  b2:	88 b9       	out	0x08, r24	; 8
{
	//PORTC_set_pin_dir(0, dir);
	if (dir == PORT_DIR_OUT) {
		DDRC |= (1 << PORTC0);
	} else if (dir == PORT_DIR_IN) {
		DDRC &= ~(1 << PORTC0);
  b4:	87 b1       	in	r24, 0x07	; 7
  b6:	8e 7f       	andi	r24, 0xFE	; 254
  b8:	87 b9       	out	0x07, r24	; 7
 */
static inline void COLUMN1_set_level(const uint8_t level)
{
	//PORTC_set_pin_level(0, level);
	if (level) {
		PORTC |= (1 << PORTC0);
  ba:	88 b1       	in	r24, 0x08	; 8
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	88 b9       	out	0x08, r24	; 8
{
	//PORTC_set_pin_dir(2, dir);
	if (dir == PORT_DIR_OUT) {
		DDRC |= (1 << PORTC2);
	} else if (dir == PORT_DIR_IN) {
		DDRC &= ~(1 << PORTC2);
  c0:	87 b1       	in	r24, 0x07	; 7
  c2:	8b 7f       	andi	r24, 0xFB	; 251
  c4:	87 b9       	out	0x07, r24	; 7
 */
static inline void COLUMN0_set_level(const uint8_t level)
{
	//PORTC_set_pin_level(2, level);
	if (level) {
		PORTC |= (1 << PORTC2);
  c6:	88 b1       	in	r24, 0x08	; 8
  c8:	84 60       	ori	r24, 0x04	; 4
  ca:	88 b9       	out	0x08, r24	; 8
{
	//PORTC_set_pin_level(1, level);
	if (level) {
		PORTC |= (1 << PORTC1);
	} else {
		PORTC &= ~(1 << PORTC1);
  cc:	88 b1       	in	r24, 0x08	; 8
  ce:	8d 7f       	andi	r24, 0xFD	; 253
  d0:	88 b9       	out	0x08, r24	; 8
 */
static inline void ROW1_set_level(const uint8_t level)
{
	//PORTC_set_pin_level(5, level);
	if (level) {
		PORTC |= (1 << PORTC5);
  d2:	88 b1       	in	r24, 0x08	; 8
  d4:	80 62       	ori	r24, 0x20	; 32
  d6:	88 b9       	out	0x08, r24	; 8
 */
static inline void ROW2_set_level(const uint8_t level)
{
	//PORTC_set_pin_level(4, level);
	if (level) {
		PORTC |= (1 << PORTC4);
  d8:	88 b1       	in	r24, 0x08	; 8
  da:	80 61       	ori	r24, 0x10	; 16
  dc:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	8f e9       	ldi	r24, 0x9F	; 159
  e0:	9f e0       	ldi	r25, 0x0F	; 15
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <main+0x58>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x5e>
  e8:	00 00       	nop
 * Reads the level on a pin
 */
static inline uint8_t COLUMN0_get_level()
{
	//return PORTC_get_pin_level(2);
	if (PINC & (1 << PINC2)) {
  ea:	86 b1       	in	r24, 0x06	; 6
  ec:	98 2f       	mov	r25, r24
  ee:	94 70       	andi	r25, 0x04	; 4
  f0:	82 fd       	sbrc	r24, 2
		return 1;
  f2:	91 e0       	ldi	r25, 0x01	; 1
	while (1) {
		ROW0_set_level(0);
		ROW1_set_level(1);
		ROW2_set_level(1);
		_delay_ms(1);
		if(COLUMN0_get_level() == 0 && COLUMN1_get_level() == 0)  PORTB |= 0b00010000;
  f4:	91 11       	cpse	r25, r1
  f6:	0b c0       	rjmp	.+22     	; 0x10e <main+0x84>
 * Reads the level on a pin
 */
static inline uint8_t COLUMN1_get_level()
{
	//return PORTC_get_pin_level(0);
	if (PINC & (1 << PINC0)) {
  f8:	86 b1       	in	r24, 0x06	; 6
  fa:	98 2f       	mov	r25, r24
  fc:	91 70       	andi	r25, 0x01	; 1
  fe:	80 fd       	sbrc	r24, 0
		return 1;
 100:	91 e0       	ldi	r25, 0x01	; 1
 102:	91 11       	cpse	r25, r1
 104:	04 c0       	rjmp	.+8      	; 0x10e <main+0x84>
 106:	85 b1       	in	r24, 0x05	; 5
 108:	80 61       	ori	r24, 0x10	; 16
 10a:	85 b9       	out	0x05, r24	; 5
 10c:	03 c0       	rjmp	.+6      	; 0x114 <main+0x8a>
		else  PORTB &= 0b11101111;
 10e:	85 b1       	in	r24, 0x05	; 5
 110:	8f 7e       	andi	r24, 0xEF	; 239
 112:	85 b9       	out	0x05, r24	; 5
 */
static inline void ROW0_set_level(const uint8_t level)
{
	//PORTC_set_pin_level(1, level);
	if (level) {
		PORTC |= (1 << PORTC1);
 114:	88 b1       	in	r24, 0x08	; 8
 116:	82 60       	ori	r24, 0x02	; 2
 118:	88 b9       	out	0x08, r24	; 8
{
	//PORTC_set_pin_level(5, level);
	if (level) {
		PORTC |= (1 << PORTC5);
	} else {
		PORTC &= ~(1 << PORTC5);
 11a:	88 b1       	in	r24, 0x08	; 8
 11c:	8f 7d       	andi	r24, 0xDF	; 223
 11e:	88 b9       	out	0x08, r24	; 8
 */
static inline void ROW2_set_level(const uint8_t level)
{
	//PORTC_set_pin_level(4, level);
	if (level) {
		PORTC |= (1 << PORTC4);
 120:	88 b1       	in	r24, 0x08	; 8
 122:	80 61       	ori	r24, 0x10	; 16
 124:	88 b9       	out	0x08, r24	; 8
 126:	8f e9       	ldi	r24, 0x9F	; 159
 128:	9f e0       	ldi	r25, 0x0F	; 15
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <main+0xa0>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0xa6>
 130:	00 00       	nop
 * Reads the level on a pin
 */
static inline uint8_t COLUMN1_get_level()
{
	//return PORTC_get_pin_level(0);
	if (PINC & (1 << PINC0)) {
 132:	86 b1       	in	r24, 0x06	; 6
 134:	98 2f       	mov	r25, r24
 136:	91 70       	andi	r25, 0x01	; 1
 138:	80 fd       	sbrc	r24, 0
		return 1;
 13a:	91 e0       	ldi	r25, 0x01	; 1
		//_delay_ms(200);
		ROW0_set_level(1);
		ROW1_set_level(0);
		ROW2_set_level(1);
		_delay_ms(1);
		if(COLUMN1_get_level() == 0 && COLUMN0_get_level() == 0 ) { PORTB |= 0b00100000; }
 13c:	91 11       	cpse	r25, r1
 13e:	0b c0       	rjmp	.+22     	; 0x156 <main+0xcc>
 * Reads the level on a pin
 */
static inline uint8_t COLUMN0_get_level()
{
	//return PORTC_get_pin_level(2);
	if (PINC & (1 << PINC2)) {
 140:	86 b1       	in	r24, 0x06	; 6
 142:	98 2f       	mov	r25, r24
 144:	94 70       	andi	r25, 0x04	; 4
 146:	82 fd       	sbrc	r24, 2
		return 1;
 148:	91 e0       	ldi	r25, 0x01	; 1
 14a:	91 11       	cpse	r25, r1
 14c:	04 c0       	rjmp	.+8      	; 0x156 <main+0xcc>
 14e:	85 b1       	in	r24, 0x05	; 5
 150:	80 62       	ori	r24, 0x20	; 32
 152:	85 b9       	out	0x05, r24	; 5
 154:	03 c0       	rjmp	.+6      	; 0x15c <main+0xd2>
		else PORTB &= 0b11011111;
 156:	85 b1       	in	r24, 0x05	; 5
 158:	8f 7d       	andi	r24, 0xDF	; 223
 15a:	85 b9       	out	0x05, r24	; 5
 15c:	9f ef       	ldi	r25, 0xFF	; 255
 15e:	23 ec       	ldi	r18, 0xC3	; 195
 160:	89 e0       	ldi	r24, 0x09	; 9
 162:	91 50       	subi	r25, 0x01	; 1
 164:	20 40       	sbci	r18, 0x00	; 0
 166:	80 40       	sbci	r24, 0x00	; 0
 168:	e1 f7       	brne	.-8      	; 0x162 <main+0xd8>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <main+0xe2>
 16c:	00 00       	nop
 */
static inline void ROW0_set_level(const uint8_t level)
{
	//PORTC_set_pin_level(1, level);
	if (level) {
		PORTC |= (1 << PORTC1);
 16e:	88 b1       	in	r24, 0x08	; 8
 170:	82 60       	ori	r24, 0x02	; 2
 172:	88 b9       	out	0x08, r24	; 8
 */
static inline void ROW1_set_level(const uint8_t level)
{
	//PORTC_set_pin_level(5, level);
	if (level) {
		PORTC |= (1 << PORTC5);
 174:	88 b1       	in	r24, 0x08	; 8
 176:	80 62       	ori	r24, 0x20	; 32
 178:	88 b9       	out	0x08, r24	; 8
{
	//PORTC_set_pin_level(4, level);
	if (level) {
		PORTC |= (1 << PORTC4);
	} else {
		PORTC &= ~(1 << PORTC4);
 17a:	88 b1       	in	r24, 0x08	; 8
 17c:	8f 7e       	andi	r24, 0xEF	; 239
 17e:	88 b9       	out	0x08, r24	; 8
 180:	8f e9       	ldi	r24, 0x9F	; 159
 182:	9f e0       	ldi	r25, 0x0F	; 15
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <main+0xfa>
 188:	00 c0       	rjmp	.+0      	; 0x18a <main+0x100>
 18a:	00 00       	nop
 * Reads the level on a pin
 */
static inline uint8_t COLUMN1_get_level()
{
	//return PORTC_get_pin_level(0);
	if (PINC & (1 << PINC0)) {
 18c:	86 b1       	in	r24, 0x06	; 6
 18e:	98 2f       	mov	r25, r24
 190:	91 70       	andi	r25, 0x01	; 1
 192:	80 fd       	sbrc	r24, 0
		return 1;
 194:	91 e0       	ldi	r25, 0x01	; 1
		_delay_ms(200);
		ROW0_set_level(1);
		ROW1_set_level(1);
		ROW2_set_level(0);
		_delay_ms(1);
		if(COLUMN1_get_level() == 0 && COLUMN0_get_level() == 0 ) { PORTB |= 0b00001000; }
 196:	91 11       	cpse	r25, r1
 198:	0b c0       	rjmp	.+22     	; 0x1b0 <main+0x126>
 * Reads the level on a pin
 */
static inline uint8_t COLUMN0_get_level()
{
	//return PORTC_get_pin_level(2);
	if (PINC & (1 << PINC2)) {
 19a:	86 b1       	in	r24, 0x06	; 6
 19c:	98 2f       	mov	r25, r24
 19e:	94 70       	andi	r25, 0x04	; 4
 1a0:	82 fd       	sbrc	r24, 2
		return 1;
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	91 11       	cpse	r25, r1
 1a6:	04 c0       	rjmp	.+8      	; 0x1b0 <main+0x126>
 1a8:	85 b1       	in	r24, 0x05	; 5
 1aa:	88 60       	ori	r24, 0x08	; 8
 1ac:	85 b9       	out	0x05, r24	; 5
 1ae:	8e cf       	rjmp	.-228    	; 0xcc <main+0x42>
		else PORTB &= 0b11110111;
 1b0:	85 b1       	in	r24, 0x05	; 5
 1b2:	87 7f       	andi	r24, 0xF7	; 247
 1b4:	85 b9       	out	0x05, r24	; 5
 1b6:	8a cf       	rjmp	.-236    	; 0xcc <main+0x42>

000001b8 <_exit>:
 1b8:	f8 94       	cli

000001ba <__stop_program>:
 1ba:	ff cf       	rjmp	.-2      	; 0x1ba <__stop_program>
